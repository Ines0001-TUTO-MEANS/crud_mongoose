GIT-LOG(1)                                                             Git Manual                                                             GIT-LOG(1)

NNAAMMEE
       git-log - Show commit logs

SSYYNNOOPPSSIISS
       _g_i_t _l_o_g [<options>] [<revision range>] [[--] <path>...]

DDEESSCCRRIIPPTTIIOONN
       Shows the commit logs.

       The command takes options applicable to the git rev-list command to control what is shown and how, and options applicable to the git diff-*
       commands to control how the changes each commit introduces are shown.

OOPPTTIIOONNSS
       --follow
           Continue listing the history of a file beyond renames (works only for a single file).

       --no-decorate, --decorate[=short|full|no]
           Print out the ref names of any commits that are shown. If _s_h_o_r_t is specified, the ref name prefixes _r_e_f_s_/_h_e_a_d_s_/, _r_e_f_s_/_t_a_g_s_/ and _r_e_f_s_/_r_e_m_o_t_e_s_/
           will not be printed. If _f_u_l_l is specified, the full ref name (including prefix) will be printed. The default option is _s_h_o_r_t.

       --source
           Print out the ref name given on the command line by which each commit was reached.

       --use-mailmap
           Use mailmap file to map author and committer names and email addresses to canonical real names and email addresses. See ggiitt--sshhoorrttlloogg(1).

       --full-diff
           Without this flag, git log -p <path>...  shows commits that touch the specified paths, and diffs about the same specified paths. With this,
           the full diff is shown for commits that touch the specified paths; this means that "<path>..." limits only commits, and doesn’t limit diff
           for those commits.

           Note that this affects all diff-based output types, e.g. those produced by --stat, etc.

       --log-size
           Include a line “log size <number>” in the output for each commit, where <number> is the length of that commit’s message in bytes. Intended to
           speed up tools that read log messages from git log output by allowing them to allocate space in advance.

       -L <start>,<end>:<file>, -L :<funcname>:<file>
           Trace the evolution of the line range given by "<start>,<end>" (or the function name regex <funcname>) within the <file>. You may not give
           any pathspec limiters. This is currently limited to a walk starting from a single revision, i.e., you may only give zero or one positive
           revision arguments. You can specify this option more than once.

           <start> and <end> can take one of these forms:

           ·   number

               If <start> or <end> is a number, it specifies an absolute line number (lines count from 1).

           ·   /regex/

               This form will use the first line matching the given POSIX regex. If <start> is a regex, it will search from the end of the previous -L
               range, if any, otherwise from the start of file. If <start> is “^/regex/”, it will search from the start of file. If <end> is a regex, it
               will search starting at the line given by <start>.

           ·   +offset or -offset

               This is only valid for <end> and will specify a number of lines before or after the line given by <start>.

           If “:<funcname>” is given in place of <start> and <end>, it is a regular expression that denotes the range from the first funcname line that
           matches <funcname>, up to the next funcname line. “:<funcname>” searches from the end of the previous -L range, if any, otherwise from the
           start of file. “^:<funcname>” searches from the start of file.

       <revision range>
           Show only commits in the specified revision range. When no <revision range> is specified, it defaults to HEAD (i.e. the whole history leading
           to the current commit).  origin..HEAD specifies all the commits reachable from the current commit (i.e.  HEAD), but not from origin. For a
           complete list of ways to spell <revision range>, see the _S_p_e_c_i_f_y_i_n_g _R_a_n_g_e_s section of ggiittrreevviissiioonnss(7).

       [--] <path>...
           Show only commits that are enough to explain how the files that match the specified paths came to be. See _H_i_s_t_o_r_y _S_i_m_p_l_i_f_i_c_a_t_i_o_n below for
           details and other simplification modes.

           Paths may need to be prefixed with ‘`-- '’ to separate them from options or the revision range, when confusion arises.

   CCoommmmiitt LLiimmiittiinngg
       Besides specifying a range of commits that should be listed using the special notations explained in the description, additional commit limiting
       may be applied.

       Using more options generally further limits the output (e.g. --since=<date1> limits to commits newer than <date1>, and using it with
       --grep=<pattern> further limits to commits whose log message has a line that matches <pattern>), unless otherwise noted.

       Note that these are applied before commit ordering and formatting options, such as --reverse.

       -<number>, -n <number>, --max-count=<number>
           Limit the number of commits to output.

       --skip=<number>
           Skip _n_u_m_b_e_r commits before starting to show the commit output.

       --since=<date>, --after=<date>
           Show commits more recent than a specific date.

       --until=<date>, --before=<date>
           Show commits older than a specific date.

       --author=<pattern>, --committer=<pattern>
           Limit the commits output to ones with author/committer header lines that match the specified pattern (regular expression). With more than one
           --author=<pattern>, commits whose author matches any of the given patterns are chosen (similarly for multiple --committer=<pattern>).

       --grep-reflog=<pattern>
           Limit the commits output to ones with reflog entries that match the specified pattern (regular expression). With more than one --grep-reflog,
           commits whose reflog message matches any of the given patterns are chosen. It is an error to use this option unless --walk-reflogs is in use.

       --grep=<pattern>
           Limit the commits output to ones with log message that matches the specified pattern (regular expression). With more than one
           --grep=<pattern>, commits whose message matches any of the given patterns are chosen (but see --all-match).

           When --show-notes is in effect, the message from the notes is matched as if it were part of the log message.

       --all-match
           Limit the commits output to ones that match all given --grep, instead of ones that match at least one.

       --invert-grep
           Limit the commits output to ones with log message that do not match the pattern specified with --grep=<pattern>.

       -i, --regexp-ignore-case
           Match the regular expression limiting patterns without regard to letter case.

       --basic-regexp
           Consider the limiting patterns to be basic regular expressions; this is the default.

       -E, --extended-regexp
           Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions.

       -F, --fixed-strings
           Consider the limiting patterns to be fixed strings (don’t interpret pattern as a regular expression).

       --perl-regexp
           Consider the limiting patterns to be Perl-compatible regular expressions. Requires libpcre to be compiled in.

       --remove-empty
           Stop when a given path disappears from the tree.

       --merges
           Print only merge commits. This is exactly the same as --min-parents=2.

       --no-merges
           Do not print commits with more than one parent. This is exactly the same as --max-parents=1.

       --min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents
           Show only commits which have at least (or at most) that many parent commits. In particular, --max-parents=1 is the same as --no-merges,
           --min-parents=2 is the same as --merges.  --max-parents=0 gives all root commits and --min-parents=3 all octopus merges.

           --no-min-parents and --no-max-parents reset these limits (to no limit) again. Equivalent forms are --min-parents=0 (any commit has 0 or more
           parents) and --max-parents=-1 (negative numbers denote no upper limit).

       --first-parent
           Follow only the first parent commit upon seeing a merge commit. This option can give a better overview when viewing the evolution of a
           particular topic branch, because merges into a topic branch tend to be only about adjusting to updated upstream from time to time, and this
           option allows you to ignore the individual commits brought in to your history by such a merge. Cannot be combined with --bisect.

       --not
           Reverses the meaning of the _^ prefix (or lack thereof) for all following revision specifiers, up to the next --not.

       --all
           Pretend as if all the refs in refs/ are listed on the command line as _<_c_o_m_m_i_t_>.

       --branches[=<pattern>]
           Pretend as if all the refs in refs/heads are listed on the command line as _<_c_o_m_m_i_t_>. If _<_p_a_t_t_e_r_n_> is given, limit branches to ones matching
           given shell glob. If pattern lacks _?, _*, or _[, _/_* at the end is implied.

       --tags[=<pattern>]
           Pretend as if all the refs in refs/tags are listed on the command line as _<_c_o_m_m_i_t_>. If _<_p_a_t_t_e_r_n_> is given, limit tags to ones matching given
           shell glob. If pattern lacks _?, _*, or _[, _/_* at the end is implied.

       --remotes[=<pattern>]
           Pretend as if all the refs in refs/remotes are listed on the command line as _<_c_o_m_m_i_t_>. If _<_p_a_t_t_e_r_n_> is given, limit remote-tracking branches
           to ones matching given shell glob. If pattern lacks _?, _*, or _[, _/_* at the end is implied.

       --glob=<glob-pattern>
           Pretend as if all the refs matching shell glob _<_g_l_o_b_-_p_a_t_t_e_r_n_> are listed on the command line as _<_c_o_m_m_i_t_>. Leading _r_e_f_s_/, is automatically
           prepended if missing. If pattern lacks _?, _*, or _[, _/_* at the end is implied.

       --exclude=<glob-pattern>
           Do not include refs matching _<_g_l_o_b_-_p_a_t_t_e_r_n_> that the next --all, --branches, --tags, --remotes, or --glob would otherwise consider.
           Repetitions of this option accumulate exclusion patterns up to the next --all, --branches, --tags, --remotes, or --glob option (other options
           or arguments do not clear accumulated patterns).

           The patterns given should not begin with refs/heads, refs/tags, or refs/remotes when applied to --branches, --tags, or --remotes,
           respectively, and they must begin with refs/ when applied to --glob or --all. If a trailing _/_* is intended, it must be given explicitly.

       --reflog
           Pretend as if all objects mentioned by reflogs are listed on the command line as <commit>.

       --ignore-missing
           Upon seeing an invalid object name in the input, pretend as if the bad input was not given.

       --bisect
           Pretend as if the bad bisection ref refs/bisect/bad was listed and as if it was followed by --not and the good bisection refs
           refs/bisect/good-* on the command line. Cannot be combined with --first-parent.

       --stdin
           In addition to the _<_c_o_m_m_i_t_> listed on the command line, read them from the standard input. If a _-_- separator is seen, stop reading commits
           and start reading paths to limit the result.

       --cherry-mark
           Like --cherry-pick (see below) but mark equivalent commits with = rather than omitting them, and inequivalent ones with +.

       --cherry-pick
           Omit any commit that introduces the same change as another commit on the “other side” when the set of commits are limited with symmetric
           difference.

           For example, if you have two branches, A and B, a usual way to list all commits on only one side of them is with --left-right (see the
           example below in the description of the --left-right option). However, it shows the commits that were cherry-picked from the other branch
           (for example, “3rd on b” may be cherry-picked from branch A). With this option, such pairs of commits are excluded from the output.

       --left-only, --right-only
           List only commits on the respective side of a symmetric range, i.e. only those which would be marked < resp.  > by --left-right.

           For example, --cherry-pick --right-only A...B omits those commits from B which are in A or are patch-equivalent to a commit in A. In other
           words, this lists the + commits from git cherry A B. More precisely, --cherry-pick --right-only --no-merges gives the exact list.

       --cherry
           A synonym for --right-only --cherry-mark --no-merges; useful to limit the output to the commits on our side and mark those that have been
           applied to the other side of a forked history with git log --cherry upstream...mybranch, similar to git cherry upstream mybranch.

       -g, --walk-reflogs
           Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones. When this option is used you cannot
           specify commits to exclude (that is, _^_c_o_m_m_i_t, _c_o_m_m_i_t_1_._._c_o_m_m_i_t_2, and _c_o_m_m_i_t_1_._._._c_o_m_m_i_t_2 notations cannot be used).

           With --pretty format other than oneline (for obvious reasons), this causes the output to have two extra lines of information taken from the
           reflog. By default, _c_o_m_m_i_t_@_{_N_t_h_} notation is used in the output. When the starting commit is specified as _c_o_m_m_i_t_@_{_n_o_w_}, output also uses
           _c_o_m_m_i_t_@_{_t_i_m_e_s_t_a_m_p_} notation instead. Under --pretty=oneline, the commit message is prefixed with this information on the same line. This
           option cannot be combined with --reverse. See also ggiitt--rreefflloogg(1).

       --merge
           After a failed merge, show refs that touch files having a conflict and don’t exist on all heads to merge.

       --boundary
           Output excluded boundary commits. Boundary commits are prefixed with -.

   HHiissttoorryy SSiimmpplliiffiiccaattiioonn
       Sometimes you are only interested in parts of the history, for example the commits modifying a particular <path>. But there are two parts of
       _H_i_s_t_o_r_y _S_i_m_p_l_i_f_i_c_a_t_i_o_n, one part is selecting the commits and the other is how to do it, as there are various strategies to simplify the history.

       The following options select the commits to be shown:

       <paths>
           Commits modifying the given <paths> are selected.

       --simplify-by-decoration
           Commits that are referred by some branch or tag are selected.

       Note that extra commits can be shown to give a meaningful history.

       The following options affect the way the simplification is performed:

       Default mode
           Simplifies the history to the simplest history explaining the final state of the tree. Simplest because it prunes some side branches if the
           end result is the same (i.e. merging branches with the same content)

       --full-history
           Same as the default mode, but does not prune some history.

       --dense
           Only the selected commits are shown, plus some to have a meaningful history.

       --sparse
           All commits in the simplified history are shown.

       --simplify-merges
           Additional option to --full-history to remove some needless merges from the resulting history, as there are no s